generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StockCard {
  id                      String                    @id @default(cuid())
  productCode             String                    @unique @db.VarChar(100)
  productName             String                    @db.VarChar(150)
  invoiceName             String?                   @db.VarChar(150)
  shortDescription        String?                   @db.VarChar(150)
  description             String?
  warehouseCode           String                    @db.VarChar(50)
  manufacturerCode        String?                   @db.VarChar(50)
  companyCode             String                    @db.VarChar(50)
  branchCode              String                    @db.VarChar(50)
  brand                   String?                   @db.VarChar(100)
  unitOfMeasure           String?                   @db.VarChar(50)
  productType             String                    @db.VarChar(50)
  riskQuantities          Decimal?                   @db.Decimal(15, 4)
  stockStatus             Boolean                   @default(true)
  hasExpirationDate       Boolean                   @default(false)
  allowNegativeStock      Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String?
  updatedBy               String?
  Attributes              StockCardAttribute[]
  Barcodes                StockCardBarcode[]
  Categories              StockCardCategoryItem[]
  StockCardPriceListItems StockCardPriceListItems[]
  TaxRates                StockCardTaxRate[]
  Variations              StockCardVariation[]
}

model StockCardPriceList {
  id            String  @id @default(cuid())
  priceListName String  @db.VarChar(100)
  currency      String  @db.VarChar(3)
  isActive      Boolean @default(true)
}

model StockCardPriceListItems {
  id                 String               @id @default(cuid())
  priceListId        String
  stockCardId        String
  price              Decimal              @db.Decimal(15, 4)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  StockCardVariation StockCardVariation[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model StockCardBarcode {
  id                 String               @id @default(cuid())
  stockCardId        String
  barcode            String               @unique @db.VarChar(100)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  StockCardVariation StockCardVariation[] @relation("StockCardBarcodeToStockCardVariation")
}

model StockCardCategory {
  id               String                  @id @default(cuid())
  categoryName     String                  @db.VarChar(100)
  parentCategoryId String?
  parentCategory   StockCardCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  StockCardCategory[]     @relation("CategoryHierarchy")
  CategoryItems    StockCardCategoryItem[]
}

model StockCardCategoryItem {
  id          String            @id @default(cuid())
  stockCardId String
  categoryId  String
  category    StockCardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockCard   StockCard         @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardTaxRate {
  id          String     @id @default(cuid())
  stockCardId String?
  taxName     String     @db.VarChar(100)
  taxRate     Decimal    @db.Decimal(5, 2)
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardAttribute {
  id            String               @id @default(cuid())
  attributeName String               @db.VarChar(100)
  values        String[]
  stockCardId   String?
  stockCard     StockCard?           @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  variations    StockCardVariation[] @relation("StockCardAttributeToStockCardVariation")
}

model StockCardVariation {
  id                      String                    @id @default(cuid())
  stockCardId             String
  productCode             String                    @db.VarChar(100)
  productName             String                    @db.VarChar(150)
  invoiceName             String?                   @db.VarChar(150)
  shortDescription        String?                   @db.VarChar(150)
  description             String?
  riskQuantities          Decimal                   @db.Decimal(15, 4)
  hasExpirationDate       Boolean                   @default(false)
  allowNegativeStock      Boolean                   @default(false)
  price                   Decimal                   @db.Decimal(15, 4)
  stockCard               StockCard                 @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  attributes              StockCardAttribute[]      @relation("StockCardAttributeToStockCardVariation")
  Barcodes                StockCardBarcode[]        @relation("StockCardBarcodeToStockCardVariation")
  StockCardPriceListItems StockCardPriceListItems[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model User {
  id       String @id @default(cuid())
  username String @unique @db.VarChar(50)
  password String @db.VarChar(100)
}
